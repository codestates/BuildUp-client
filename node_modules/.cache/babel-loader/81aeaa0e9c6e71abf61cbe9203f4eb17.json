{"ast":null,"code":"import { initialState } from \"./initialState\";\nimport { jwt_isExpired, fetch_custom } from \"../utilities/index\";\nimport { ACTIONS } from \"../actions\";\n\nconst axios = require(\"axios\");\n\nconst toDoItemsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTIONS.CREATE_TODOLIST:\n      {\n        // TODO: 서버와 통신후 결과값만 받아옵니다.\n        const newItems = Object.assign([], state.todoItems);\n        let item = {\n          id: action.payload.id,\n          order: action.payload.order,\n          checkd: false,\n          content: action.payload.content,\n          date: action.payload.date\n        };\n        return Object.assign({}, state, {\n          todoItems: [...state.todoItems, item]\n        });\n      }\n\n    case ACTIONS.UPDATE_TODOLIST:\n      {\n        // payload is {id, content, order, checked}\n        const newItems = Object.assign([], state.todoItems);\n        let target;\n        let idx;\n\n        for (let i = 0; i < state.todoItems.length; i++) {\n          const item = state.todoItems[i];\n\n          if (`${item.id}` === `${action.payload.id}`) {\n            idx = i;\n            break;\n          }\n        }\n\n        newItems[idx].content = action.payload.content;\n        newItems[idx].order = action.payload.order;\n        newItems[idx].checked = action.payload.checked;\n        return Object.assign({}, state, {\n          todoItems: newItems\n        });\n      }\n\n    case ACTIONS.DELETE_TODOLIST:\n      {\n        // payload is {id}\n        const newItems = Object.assign([], state.todoItems);\n        let idx;\n\n        for (let i = 0; i < state.todoItems.length; i++) {\n          const item = state.todoItems[i];\n\n          if (`${item.id}` === `${action.payload.id}`) {\n            idx = i;\n            break;\n          }\n        }\n\n        newItems.splice(idx, 1);\n        return Object.assign({}, state, {\n          todoItems: newItems\n        });\n      }\n\n    case ACTIONS.GET_TODOLIST:\n      {\n        return Object.assign({}, state, {\n          todoItems: action.payload.items\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default toDoItemsReducer;","map":{"version":3,"sources":["/home/studio/Desktop/Team_Project/BuildUp-client/src/reducers/toDoItemsReducer.js"],"names":["initialState","jwt_isExpired","fetch_custom","ACTIONS","axios","require","toDoItemsReducer","state","action","type","CREATE_TODOLIST","newItems","Object","assign","todoItems","item","id","payload","order","checkd","content","date","UPDATE_TODOLIST","target","idx","i","length","checked","DELETE_TODOLIST","splice","GET_TODOLIST","items"],"mappings":"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","sourcesContent":["import { initialState } from \"./initialState\";\nimport { jwt_isExpired, fetch_custom } from \"../utilities/index\";\nimport { ACTIONS } from \"../actions\";\nconst axios = require(\"axios\");\n\nconst toDoItemsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTIONS.CREATE_TODOLIST: {\n      // TODO: 서버와 통신후 결과값만 받아옵니다.\n      const newItems = Object.assign([], state.todoItems);\n      let item = {\n        id: action.payload.id,\n        order: action.payload.order,\n        checkd: false,\n        content: action.payload.content,\n        date: action.payload.date,\n      };\n      return Object.assign({}, state, {\n        todoItems: [...state.todoItems, item],\n      });\n    }\n\n    case ACTIONS.UPDATE_TODOLIST: {\n      // payload is {id, content, order, checked}\n      const newItems = Object.assign([], state.todoItems);\n      let target;\n      let idx;\n      for (let i = 0; i < state.todoItems.length; i++) {\n        const item = state.todoItems[i];\n        if (`${item.id}` === `${action.payload.id}`) {\n          idx = i;\n          break;\n        }\n      }\n\n      newItems[idx].content = action.payload.content;\n      newItems[idx].order = action.payload.order;\n      newItems[idx].checked = action.payload.checked;\n\n      return Object.assign({}, state, {\n        todoItems: newItems,\n      });\n    }\n\n    case ACTIONS.DELETE_TODOLIST: {\n      // payload is {id}\n      const newItems = Object.assign([], state.todoItems);\n      let idx;\n      for (let i = 0; i < state.todoItems.length; i++) {\n        const item = state.todoItems[i];\n        if (`${item.id}` === `${action.payload.id}`) {\n          idx = i;\n          break;\n        }\n      }\n\n      newItems.splice(idx, 1);\n\n      return Object.assign({}, state, {\n        todoItems: newItems,\n      });\n    }\n\n    case ACTIONS.GET_TODOLIST: {\n      return Object.assign({}, state, {\n        todoItems: action.payload.items,\n      });\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default toDoItemsReducer;\n"]},"metadata":{},"sourceType":"module"}