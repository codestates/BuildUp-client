{"ast":null,"code":"var _jsxFileName = \"/home/studio/Desktop/Team_Project/BuildUp-client/src/components/carousels/MonthCalendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../css/temporary-CSS-for-Carousel.css\";\nimport \"../css/temporary-CSS-monthTodoContainer.css\";\nimport { setDateSelector, toggleModal, setModalType } from \"../../actions/index\";\nimport { startOfMonth, endOfMonth, startOfWeek, endOfWeek, format, isSameMonth, addDays, parseISO } from \"date-fns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Calendar() {\n  _s();\n\n  // TODO 아래 변수를 조정하여 화면에 노출되는 최대 TODO 갯수를 조정할 수 있습니다.\n  const MAX_ELEMENTS_COUNT = 3;\n  const dispatch = useDispatch();\n  const dateSelectorState = useSelector(state => state.dateSelectorReducer);\n  const todoItemsState = useSelector(state => state.toDoItemsReducer);\n  const {\n    dateSelector\n  } = dateSelectorState;\n  const todoItems = todoItemsState.todoItems;\n  const modalState = useSelector(state => state.modalStateReducer);\n  const modalTypeState = useSelector(state => state.modalTypeReducer);\n  const isModalOpen = modalState.modalStatus;\n  const {\n    modalType\n  } = modalTypeState;\n\n  const isSelectedDay = date => {\n    date = date.split(\"-\");\n    const [year, month, day] = date;\n    if (Number(year) === Number(dateSelector.year) && Number(month) === Number(dateSelector.month) && Number(day) === Number(dateSelector.day)) return true;\n    return false;\n  };\n\n  const handleDateSelector = e => {\n    // if (!e.target.dataset.date) return;\n    if (!isModalOpen) dispatch(toggleModal());\n    if (modalType !== \"TODOMANAGER\") dispatch(setModalType(\"TODOMANAGER\"));\n    const date = e.target.dataset.date.split(\"-\");\n    const [year, month, day] = date;\n    dispatch(setDateSelector(year, month, day));\n  };\n\n  const renderTodo = date => {\n    const count = {};\n    const tempStore = Object.assign([], todoItems);\n    tempStore.sort((a, b) => a.order - b.order);\n    const sorted = tempStore.filter(el => {\n      if (el.date === date) {\n        if (count[el.date] >= MAX_ELEMENTS_COUNT) return false;\n        if (!count[el.date]) count[el.date] = 1;else count[el.date]++;\n        return true;\n      }\n\n      return false;\n    });\n    return sorted.map((el, idx) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: [\"disable-select\", \"month-todo-item\", el.checked ? \"checked\" : \"\"].join(\" \"),\n        \"data-date\": date,\n        onClick: handleDateSelector,\n        children: el.content\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  const renderCells = () => {\n    let {\n      year,\n      month,\n      day\n    } = dateSelector;\n    const timeObj = parseISO(`${String(year).padStart(4, 0)}-${String(month).padStart(2, 0)}-${String(day).padStart(2, 0)}`);\n    const monthStart = startOfMonth(timeObj);\n    const monthEnd = endOfMonth(monthStart);\n    const startDate = startOfWeek(monthStart);\n    const endDate = endOfWeek(monthEnd);\n    const startMonth = format(monthStart, \"MM\");\n    const rows = [];\n    let days = [];\n    day = startDate;\n    let formattedDate = \"\";\n    let propsDate = \"\";\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = format(day, \"d\");\n        propsDate = format(day, \"yyyy-MM-dd\");\n        const targetMonth = format(day, \"MM\");\n        days.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: targetMonth === startMonth ? handleDateSelector : () => {},\n          \"data-date\": propsDate,\n          className: [\"col\", \"cell\", !isSameMonth(day, monthStart) ? \"disabled\" : isSelectedDay(propsDate) ? \"selected\" : \"\", targetMonth === startMonth ? \"\" : \"month-disabled\"].join(\" \"),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: [\"number\", \"disable-select\"].join(\" \"),\n            \"data-date\": propsDate,\n            onClick: handleDateSelector,\n            children: formattedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), renderTodo(propsDate)]\n        }, day, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this));\n        day = addDays(day, 1);\n      }\n\n      rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: days\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this));\n      days = [];\n    }\n\n    return rows;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"month-todo-container\",\n    children: renderCells()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Calendar, \"Kc6fItC77bDfhlKfC2Bql/CkxwE=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/studio/Desktop/Team_Project/BuildUp-client/src/components/carousels/MonthCalendar.js"],"names":["React","useState","useDispatch","useSelector","setDateSelector","toggleModal","setModalType","startOfMonth","endOfMonth","startOfWeek","endOfWeek","format","isSameMonth","addDays","parseISO","Calendar","MAX_ELEMENTS_COUNT","dispatch","dateSelectorState","state","dateSelectorReducer","todoItemsState","toDoItemsReducer","dateSelector","todoItems","modalState","modalStateReducer","modalTypeState","modalTypeReducer","isModalOpen","modalStatus","modalType","isSelectedDay","date","split","year","month","day","Number","handleDateSelector","e","target","dataset","renderTodo","count","tempStore","Object","assign","sort","a","b","order","sorted","filter","el","map","idx","checked","join","content","renderCells","timeObj","String","padStart","monthStart","monthEnd","startDate","endDate","startMonth","rows","days","formattedDate","propsDate","i","targetMonth","push"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../css/temporary-CSS-for-Carousel.css\";\nimport \"../css/temporary-CSS-monthTodoContainer.css\";\nimport {\n  setDateSelector,\n  toggleModal,\n  setModalType,\n} from \"../../actions/index\";\n\nimport {\n  startOfMonth,\n  endOfMonth,\n  startOfWeek,\n  endOfWeek,\n  format,\n  isSameMonth,\n  addDays,\n  parseISO,\n} from \"date-fns\";\n\nfunction Calendar() {\n  // TODO 아래 변수를 조정하여 화면에 노출되는 최대 TODO 갯수를 조정할 수 있습니다.\n  const MAX_ELEMENTS_COUNT = 3;\n\n  const dispatch = useDispatch();\n\n  const dateSelectorState = useSelector((state) => state.dateSelectorReducer);\n  const todoItemsState = useSelector((state) => state.toDoItemsReducer);\n  const { dateSelector } = dateSelectorState;\n  const todoItems = todoItemsState.todoItems;\n\n  const modalState = useSelector((state) => state.modalStateReducer);\n  const modalTypeState = useSelector((state) => state.modalTypeReducer);\n  const isModalOpen = modalState.modalStatus;\n  const { modalType } = modalTypeState;\n\n  const isSelectedDay = (date) => {\n    date = date.split(\"-\");\n    const [year, month, day] = date;\n\n    if (\n      Number(year) === Number(dateSelector.year) &&\n      Number(month) === Number(dateSelector.month) &&\n      Number(day) === Number(dateSelector.day)\n    )\n      return true;\n    return false;\n  };\n\n  const handleDateSelector = (e) => {\n    // if (!e.target.dataset.date) return;\n    if (!isModalOpen) dispatch(toggleModal());\n    if (modalType !== \"TODOMANAGER\") dispatch(setModalType(\"TODOMANAGER\"));\n\n    const date = e.target.dataset.date.split(\"-\");\n    const [year, month, day] = date;\n\n    dispatch(setDateSelector(year, month, day));\n  };\n\n  const renderTodo = (date) => {\n    const count = {};\n\n    const tempStore = Object.assign([], todoItems);\n    tempStore.sort((a, b) => a.order - b.order);\n\n    const sorted = tempStore.filter((el) => {\n      if (el.date === date) {\n        if (count[el.date] >= MAX_ELEMENTS_COUNT) return false;\n        if (!count[el.date]) count[el.date] = 1;\n        else count[el.date]++;\n        return true;\n      }\n      return false;\n    });\n\n    return sorted.map((el, idx) => {\n      return (\n        <li\n          className={[\n            \"disable-select\",\n            \"month-todo-item\",\n            el.checked ? \"checked\" : \"\",\n          ].join(\" \")}\n          data-date={date}\n          onClick={handleDateSelector}\n          key={idx}\n        >\n          {el.content}\n        </li>\n      );\n    });\n  };\n\n  const renderCells = () => {\n    let { year, month, day } = dateSelector;\n    const timeObj = parseISO(\n      `${String(year).padStart(4, 0)}-${String(month).padStart(2, 0)}-${String(\n        day,\n      ).padStart(2, 0)}`,\n    );\n\n    const monthStart = startOfMonth(timeObj);\n    const monthEnd = endOfMonth(monthStart);\n    const startDate = startOfWeek(monthStart);\n    const endDate = endOfWeek(monthEnd);\n\n    const startMonth = format(monthStart, \"MM\");\n\n    const rows = [];\n    let days = [];\n    day = startDate;\n    let formattedDate = \"\";\n    let propsDate = \"\";\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = format(day, \"d\");\n        propsDate = format(day, \"yyyy-MM-dd\");\n        const targetMonth = format(day, \"MM\");\n        days.push(\n          <div\n            onClick={targetMonth === startMonth ? handleDateSelector : () => {}}\n            data-date={propsDate}\n            className={[\n              \"col\",\n              \"cell\",\n              !isSameMonth(day, monthStart)\n                ? \"disabled\"\n                : isSelectedDay(propsDate)\n                ? \"selected\"\n                : \"\",\n              targetMonth === startMonth ? \"\" : \"month-disabled\",\n            ].join(\" \")}\n            key={day}\n          >\n            <span\n              className={[\"number\", \"disable-select\"].join(\" \")}\n              data-date={propsDate}\n              onClick={handleDateSelector}\n            >\n              {formattedDate}\n            </span>\n            {renderTodo(propsDate)}\n          </div>,\n        );\n        day = addDays(day, 1);\n      }\n      rows.push(\n        <div className=\"row\" key={day}>\n          {days}\n        </div>,\n      );\n      days = [];\n    }\n    return rows;\n  };\n\n  return <div id=\"month-todo-container\">{renderCells()}</div>;\n}\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"module"}