{"ast":null,"code":"var _jsxFileName = \"/home/studio/Desktop/Team_Project/BuildUp-client/src/components/carousels/DayTodoContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../css/temporary-CSS-datyTodoContainer.css\";\nimport { fetch_custom, jwt_isExpired } from \"../../utilities/index.js\";\nimport { updateTodoList, setAccessToken } from \"../../actions/index\";\nimport { format } from \"date-fns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst _initGrabData = {\n  target: null,\n  position: null,\n  move_up: [],\n  move_down: [],\n  updateList: []\n};\n\nconst DayTodoItemList = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [lists, setLists] = useState([]);\n  const [grab, setGrab] = useState(_initGrabData);\n  const [isDrag, setIsDrag] = useState(false);\n  const todoItemsState = useSelector(state => state.toDoItemsReducer);\n  const accessTokenState = useSelector(state => state.accessTokenReducer);\n  const todoItems = todoItemsState.todoItems;\n  const accessToken = accessTokenState.accessToken;\n  useEffect(() => {\n    let date = format(props.pos, \"yyyy-MM-dd\").split(\"-\");\n    const year = date[0].padStart(4, \"0\");\n    const month = date[1].padStart(2, \"0\");\n    const day = date[2].padStart(2, \"0\");\n    const curPos = `${year}-${month}-${day}`;\n    let max = 0;\n    const sorted = todoItems.filter(el => {\n      if (el.date === curPos) {\n        if (max < el.order) max = el.order;\n        return true;\n      }\n\n      return false;\n    });\n    sorted.sort((a, b) => a.order - b.order);\n    setLists(sorted);\n    props.handleMaxOrder(max);\n  }, [todoItems, props]);\n\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n\n  const handleDragStart = e => {\n    // ! HTML Element의 커스텀 속성은 e.target.{props}로 얻을 수 없다.\n    // ! getAttribute 사용해야함. dataset은 그럴 필요가 없다. 이걸 쓰도록...\n    setIsDrag(true);\n    setGrab({ ...grab,\n      target: e.target,\n      position: Number(e.target.dataset.order),\n      updateList: [...lists]\n    });\n    e.target.classList.add(\"grabbing\");\n    e.dataTransfer.effectAllowed = \"move\";\n    e.dataTransfer.setData(\"text/html\", e.target);\n  };\n\n  const handleDragEnd = e => {\n    setIsDrag(false);\n    e.target.classList.remove(\"grabbing\");\n    e.dataTransfer.dropEffect = \"move\";\n    setLists([...grab.updateList]);\n    handleUpdateListOrder(grab.updateList);\n    setGrab({\n      target: null,\n      move_up: [],\n      move_down: [],\n      updateList: []\n    });\n    e.target.style.visibility = \"visible\";\n  };\n\n  const handleDragEnter = e => {\n    if (e.target.className.includes(\"notTarget\")) return;\n    if (!isDrag) return;\n    let grabPosition = Number(grab.target.dataset.order);\n    let listPosition = grab.position;\n    let targetPosition = Number(e.target.dataset.order);\n    let move_up = [...grab.move_up];\n    let move_down = [...grab.move_down];\n    let data = [...grab.updateList];\n    data[listPosition] = data.splice(targetPosition, 1, data[listPosition])[0];\n\n    if (grabPosition > targetPosition) {\n      move_down.includes(targetPosition) ? move_down.pop() : move_down.push(targetPosition);\n    } else if (grabPosition < targetPosition) {\n      move_up.includes(targetPosition) ? move_up.pop() : move_up.push(targetPosition);\n    } else {\n      move_down = [];\n      move_up = [];\n    }\n\n    setGrab({ ...grab,\n      move_up,\n      move_down,\n      updateList: data,\n      position: targetPosition\n    });\n  };\n\n  const handleDragLeave = e => {\n    if (e.target.className.includes(\"notTarget\")) return;\n    if (!isDrag) return;\n\n    if (e.target === grab.target) {\n      e.target.style.visibility = \"hidden\";\n    }\n  };\n\n  const handleUpdateListOrder = async lists => {\n    if (lists.length <= 0 && !lists) return;\n\n    for (let idx = 0; idx < lists.length; idx++) {\n      const storeIdx = todoItems.indexOf(lists[idx]);\n      const item = todoItems[storeIdx];\n      const {\n        id,\n        content,\n        checked,\n        order\n      } = item;\n      if (order === idx) continue; // if (jwt_isExpired(accessToken)) {\n      //   let token = await fetch_custom.getAccessToken(accessToken);\n      //   await dispatch(setAccessToken(token));\n      // }\n\n      dispatch(updateTodoList({\n        id,\n        content,\n        checked,\n        order: idx\n      }));\n      fetch_custom.updateTodo(accessToken, {\n        id,\n        content,\n        isChecked: checked,\n        order: idx\n      });\n    }\n  };\n\n  const handleCheckboxEvent = async e => {\n    if (e.target.value !== \"checkbox\") return;\n    const PK = Number(e.target.parentNode.dataset.key);\n    let index;\n\n    for (let i = 0; i < todoItems.length; i++) {\n      const item = todoItems[i];\n\n      if (item.id === PK) {\n        index = i;\n        break;\n      }\n    }\n\n    const item = todoItems[index];\n    let {\n      id,\n      content,\n      checked,\n      order\n    } = item;\n    checked === true ? checked = false : checked = true; // if (jwt_isExpired(accessToken)) {\n    //   let token = await fetch_custom.getAccessToken(accessToken);\n    //   await dispatch(setAccessToken(token));\n    // }\n\n    dispatch(updateTodoList({\n      id,\n      content,\n      order,\n      checked\n    }));\n    fetch_custom.updateTodo(accessToken, {\n      id,\n      content,\n      order,\n      isChecked: checked\n    }); // TODO: LIST에도 체크 여부를 전달해야 한다.\n\n    let date = format(props.pos, \"yyyy-MM-dd\").split(\"-\");\n    const year = date[0].padStart(4, \"0\");\n    const month = date[1].padStart(2, \"0\");\n    const day = date[2].padStart(2, \"0\");\n    const curPos = `${year}-${month}-${day}`;\n    const sorted = todoItems.filter(el => {\n      if (el.date === curPos) {\n        return true;\n      }\n\n      return false;\n    });\n    setLists(sorted);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"day-todo-container-ul\",\n      onDragOver: handleDragOver,\n      children: lists.map((val, index) => {\n        let classNames = \"\";\n        let checkClassName = val.checked ? \"checked\" : \"\";\n        grab.move_up.includes(index) && (classNames = \"move_up\");\n        grab.move_down.includes(index) && (classNames = \"move_down\");\n        let move_stop = isDrag ? \"\" : \"move_stop\";\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          \"data-key\": val.id,\n          \"data-order\": index,\n          \"data-content\": val.content,\n          \"data-date\": val.date,\n          className: [\"dayTodoItem\", classNames, move_stop, \"cursor-move\", \"target\", checkClassName].join(\" \"),\n          isdrag: isDrag ? 1 : 0 //! onDragStart: Element를 드래그하기 시작할 때\n          ,\n          onDragStart: handleDragStart // ! onDragEnd: Element의 드래그를 끝낼 때\n          ,\n          onDragEnd: handleDragEnd // ! onDragEnter: Draggable Element가 자신의 (event.target은 자신)범위 안으로 들어갔을 때\n          ,\n          onDragEnter: handleDragEnter // ! onDragLeave: Draggable Element가 자신의 (event.target은 자신)범위 밖으로 나갔을 때\n          ,\n          onDragLeave: handleDragLeave,\n          draggable: true,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            value: \"checkbox\",\n            onClick: handleCheckboxEvent,\n            defaultChecked: val.checked,\n            className: \"notTarget\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"notTarget\",\n            children: val.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this)]\n        }, val.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DayTodoItemList, \"DD3WjTCXhh7DNVjjFT/AGhLTfAk=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = DayTodoItemList;\nexport default DayTodoItemList; // const _SocialNetworks = data.data;\n\nvar _c;\n\n$RefreshReg$(_c, \"DayTodoItemList\");","map":{"version":3,"sources":["/home/studio/Desktop/Team_Project/BuildUp-client/src/components/carousels/DayTodoContainer.js"],"names":["React","useState","useEffect","useDispatch","useSelector","fetch_custom","jwt_isExpired","updateTodoList","setAccessToken","format","_initGrabData","target","position","move_up","move_down","updateList","DayTodoItemList","props","dispatch","lists","setLists","grab","setGrab","isDrag","setIsDrag","todoItemsState","state","toDoItemsReducer","accessTokenState","accessTokenReducer","todoItems","accessToken","date","pos","split","year","padStart","month","day","curPos","max","sorted","filter","el","order","sort","a","b","handleMaxOrder","handleDragOver","e","preventDefault","handleDragStart","Number","dataset","classList","add","dataTransfer","effectAllowed","setData","handleDragEnd","remove","dropEffect","handleUpdateListOrder","style","visibility","handleDragEnter","className","includes","grabPosition","listPosition","targetPosition","data","splice","pop","push","handleDragLeave","length","idx","storeIdx","indexOf","item","id","content","checked","updateTodo","isChecked","handleCheckboxEvent","value","PK","parentNode","key","index","i","map","val","classNames","checkClassName","move_stop","join"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../css/temporary-CSS-datyTodoContainer.css\";\nimport { fetch_custom, jwt_isExpired } from \"../../utilities/index.js\";\nimport { updateTodoList, setAccessToken } from \"../../actions/index\";\nimport { format } from \"date-fns\";\n\nconst _initGrabData = {\n  target: null,\n  position: null,\n  move_up: [],\n  move_down: [],\n  updateList: [],\n};\n\nconst DayTodoItemList = (props) => {\n  const dispatch = useDispatch();\n  const [lists, setLists] = useState([]);\n  const [grab, setGrab] = useState(_initGrabData);\n  const [isDrag, setIsDrag] = useState(false);\n\n  const todoItemsState = useSelector((state) => state.toDoItemsReducer);\n  const accessTokenState = useSelector((state) => state.accessTokenReducer);\n  const todoItems = todoItemsState.todoItems;\n  const accessToken = accessTokenState.accessToken;\n\n  useEffect(() => {\n    let date = format(props.pos, \"yyyy-MM-dd\").split(\"-\");\n    const year = date[0].padStart(4, \"0\");\n    const month = date[1].padStart(2, \"0\");\n    const day = date[2].padStart(2, \"0\");\n\n    const curPos = `${year}-${month}-${day}`;\n\n    let max = 0;\n    const sorted = todoItems.filter((el) => {\n      if (el.date === curPos) {\n        if (max < el.order) max = el.order;\n        return true;\n      }\n      return false;\n    });\n\n    sorted.sort((a, b) => a.order - b.order);\n\n    setLists(sorted);\n    props.handleMaxOrder(max);\n  }, [todoItems, props]);\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  const handleDragStart = (e) => {\n    // ! HTML Element의 커스텀 속성은 e.target.{props}로 얻을 수 없다.\n    // ! getAttribute 사용해야함. dataset은 그럴 필요가 없다. 이걸 쓰도록...\n    setIsDrag(true);\n    setGrab({\n      ...grab,\n      target: e.target,\n      position: Number(e.target.dataset.order),\n      updateList: [...lists],\n    });\n\n    e.target.classList.add(\"grabbing\");\n    e.dataTransfer.effectAllowed = \"move\";\n    e.dataTransfer.setData(\"text/html\", e.target);\n  };\n\n  const handleDragEnd = (e) => {\n    setIsDrag(false);\n    e.target.classList.remove(\"grabbing\");\n    e.dataTransfer.dropEffect = \"move\";\n\n    setLists([...grab.updateList]);\n    handleUpdateListOrder(grab.updateList);\n\n    setGrab({\n      target: null,\n      move_up: [],\n      move_down: [],\n      updateList: [],\n    });\n\n    e.target.style.visibility = \"visible\";\n  };\n\n  const handleDragEnter = (e) => {\n    if (e.target.className.includes(\"notTarget\")) return;\n    if (!isDrag) return;\n    let grabPosition = Number(grab.target.dataset.order);\n    let listPosition = grab.position;\n    let targetPosition = Number(e.target.dataset.order);\n\n    let move_up = [...grab.move_up];\n    let move_down = [...grab.move_down];\n\n    let data = [...grab.updateList];\n    data[listPosition] = data.splice(targetPosition, 1, data[listPosition])[0];\n\n    if (grabPosition > targetPosition) {\n      move_down.includes(targetPosition)\n        ? move_down.pop()\n        : move_down.push(targetPosition);\n    } else if (grabPosition < targetPosition) {\n      move_up.includes(targetPosition)\n        ? move_up.pop()\n        : move_up.push(targetPosition);\n    } else {\n      move_down = [];\n      move_up = [];\n    }\n\n    setGrab({\n      ...grab,\n      move_up,\n      move_down,\n      updateList: data,\n      position: targetPosition,\n    });\n  };\n  const handleDragLeave = (e) => {\n    if (e.target.className.includes(\"notTarget\")) return;\n    if (!isDrag) return;\n    if (e.target === grab.target) {\n      e.target.style.visibility = \"hidden\";\n    }\n  };\n\n  const handleUpdateListOrder = async (lists) => {\n    if (lists.length <= 0 && !lists) return;\n    for (let idx = 0; idx < lists.length; idx++) {\n      const storeIdx = todoItems.indexOf(lists[idx]);\n      const item = todoItems[storeIdx];\n      const { id, content, checked, order } = item;\n      if (order === idx) continue;\n\n      // if (jwt_isExpired(accessToken)) {\n      //   let token = await fetch_custom.getAccessToken(accessToken);\n      //   await dispatch(setAccessToken(token));\n      // }\n\n      dispatch(updateTodoList({ id, content, checked, order: idx }));\n      fetch_custom.updateTodo(accessToken, {\n        id,\n        content,\n        isChecked: checked,\n        order: idx,\n      });\n    }\n  };\n\n  const handleCheckboxEvent = async (e) => {\n    if (e.target.value !== \"checkbox\") return;\n    const PK = Number(e.target.parentNode.dataset.key);\n    let index;\n    for (let i = 0; i < todoItems.length; i++) {\n      const item = todoItems[i];\n      if (item.id === PK) {\n        index = i;\n        break;\n      }\n    }\n    const item = todoItems[index];\n    let { id, content, checked, order } = item;\n    checked === true ? (checked = false) : (checked = true);\n\n    // if (jwt_isExpired(accessToken)) {\n    //   let token = await fetch_custom.getAccessToken(accessToken);\n    //   await dispatch(setAccessToken(token));\n    // }\n\n    dispatch(updateTodoList({ id, content, order, checked }));\n    fetch_custom.updateTodo(accessToken, {\n      id,\n      content,\n      order,\n      isChecked: checked,\n    });\n\n    // TODO: LIST에도 체크 여부를 전달해야 한다.\n    let date = format(props.pos, \"yyyy-MM-dd\").split(\"-\");\n    const year = date[0].padStart(4, \"0\");\n    const month = date[1].padStart(2, \"0\");\n    const day = date[2].padStart(2, \"0\");\n    const curPos = `${year}-${month}-${day}`;\n    const sorted = todoItems.filter((el) => {\n      if (el.date === curPos) {\n        return true;\n      }\n      return false;\n    });\n    setLists(sorted);\n  };\n\n  return (\n    <React.Fragment>\n      {/* ! onDragOver: 드래그를 내렸을 때 발생하는 이벤트, Event.target은 덮어씌워진 Element(자신)  */}\n      <ul className=\"day-todo-container-ul\" onDragOver={handleDragOver}>\n        {lists.map((val, index) => {\n          let classNames = \"\";\n          let checkClassName = val.checked ? \"checked\" : \"\";\n\n          grab.move_up.includes(index) && (classNames = \"move_up\");\n          grab.move_down.includes(index) && (classNames = \"move_down\");\n\n          let move_stop = isDrag ? \"\" : \"move_stop\";\n\n          return (\n            <li\n              key={val.id}\n              data-key={val.id}\n              data-order={index}\n              data-content={val.content}\n              data-date={val.date}\n              className={[\n                \"dayTodoItem\",\n                classNames,\n                move_stop,\n                \"cursor-move\",\n                \"target\",\n                checkClassName,\n              ].join(\" \")}\n              isdrag={isDrag ? 1 : 0}\n              //! onDragStart: Element를 드래그하기 시작할 때\n              onDragStart={handleDragStart}\n              // ! onDragEnd: Element의 드래그를 끝낼 때\n              onDragEnd={handleDragEnd}\n              // ! onDragEnter: Draggable Element가 자신의 (event.target은 자신)범위 안으로 들어갔을 때\n              onDragEnter={handleDragEnter}\n              // ! onDragLeave: Draggable Element가 자신의 (event.target은 자신)범위 밖으로 나갔을 때\n              onDragLeave={handleDragLeave}\n              draggable\n            >\n              <input\n                type=\"checkbox\"\n                value=\"checkbox\"\n                onClick={handleCheckboxEvent}\n                defaultChecked={val.checked}\n                className=\"notTarget\"\n              />\n              <span className=\"notTarget\">{val.content}</span>\n            </li>\n          );\n        })}\n      </ul>\n    </React.Fragment>\n  );\n};\n\nexport default DayTodoItemList;\n\n// const _SocialNetworks = data.data;\n"]},"metadata":{},"sourceType":"module"}