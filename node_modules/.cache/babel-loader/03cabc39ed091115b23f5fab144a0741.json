{"ast":null,"code":"require(\"dotenv\").config();\n\nconst axios = require(\"axios\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst parseJSON = require(\"date-fns/parseJSON\");\n\nconst addMinutes = require(\"date-fns/addMinutes\");\n\nconst addSeconds = require(\"date-fns/addSeconds\");\n\nconst scheme = process.env.REACT_APP_SERVER_SCHEME;\nconst host = process.env.REACT_APP_SERVER_HOST;\nconst port = process.env.REACT_APP_SERVER_PORT;\nconst api_key = process.env.REACT_APP_SERVER_APIKEY;\nconst accessSecret = process.env.REACT_APP_SERVER_ACCESS_SECRET;\nconst URL = `${scheme}://${host}:${port}`; // --------- Fetch API --------- //\n\nconst app = axios.create({\n  baseURL: URL,\n  withCredentials: true\n});\naxios.default.withCredentials = true;\nexport const fetch_custom = {\n  // ! ENDPOUNT: USER\n  getUserInfo: token => {\n    // * RETURN: data = {username, email}\n    const result = axios.get(`${URL}/user/info`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      withCredentials: true,\n      crossDomain: true\n    }).then(data => {\n      const {\n        username,\n        email\n      } = data.data.data;\n      return {\n        username,\n        email\n      };\n    }).catch(err => console.log(err));\n    return result;\n  },\n  // ! ENDPOUNT: TODO\n  getTodoInfo: async token => {\n    // * RETURN: data = [todoItems...]\n    const datas = await axios.get(`${URL}/todo/info`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      withCredentials: true,\n      crossDomain: true\n    }).then(data => {\n      const datas = data.data;\n      return datas;\n    }).catch(err => console.log(err));\n    const items = datas.data;\n    const days = datas.day;\n    const result = items.map(el => {\n      for (let i = 0; i < days.length; i++) {\n        if (days[i][1] === el.date_id) {\n          const date = days[i][0].slice(0, 10);\n          const item = { ...el,\n            date,\n            checked: el.isChecked\n          };\n          return item;\n        }\n      }\n\n      return el;\n    });\n    return result;\n  },\n  createTodo: (token, data) => {\n    // * DATA: {content, order, now: date}\n    // * RETURN: id(PK);\n    const result = axios.post(`${URL}/todo/create`, {\n      data: data\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      withCredentials: true,\n      crossDomain: true\n    }).then(data => {\n      const pk = data.data.data.id;\n      return pk;\n    }).catch(err => console.log(err));\n    return result;\n  },\n  updateTodo: (token, data) => {\n    // * DATA: {id, content, order, checked}\n    // * RETURN: nothing;\n    const result = axios.put(`${URL}/todo/update`, {\n      data: data\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      withCredentials: true,\n      crossDomain: true\n    }).then(data => {}).catch(err => console.log(err));\n    return result;\n  },\n  removeTodo: async (token, data) => {\n    // * DATA: {id}\n    // * RETURN: nothing;\n    const result = axios.delete(`${URL}/todo/remove`, {\n      data: {\n        data\n      },\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      withCredentials: true,\n      crossDomain: true\n    }).then(data => {}).catch(err => console.log(err));\n    return result;\n  },\n  getAccessToken: token => {\n    // * RETURN: NEW ACCESSTOKEN\n    const result = axios.get(`${URL}/user/refreshtokenrequest`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      withCredentials: true\n    }).then(data => {\n      const token = data.data.accessToken;\n      console.log(\"새로 발급된 ACCESSTOKEN은\", token);\n      return token;\n    }).catch(err => console.log(\"ACCESS TOKEN 발급에 문제가 있습니다\", err));\n    return result;\n  }\n}; // --------- DECODE ACCESS WEB TOKEN --------- //\n\nexport const jwt_isExpired = token => {\n  // // ! TRUE: EXPIRED, FALSE: NOT EXPIRED\n  let result;\n  if (!token) return true;\n  const decoded = jwt.verify(token, accessSecret, (err, decoded) => {\n    if (err) {\n      console.log(\"ACCESS TOKEN이 만료되었습니다.\", err);\n      result = true;\n      return;\n    }\n\n    console.log(\"ACCESS TOKEN이 유효합니다\");\n    result = false;\n  });\n  return result;\n}; // --------- 현재 시간을 기준으로 년/월/일을 얻을 수 있는 메서드 --------- //\n// ! date-fns의 format을 사용하세요\n// ! 일부 스크립트에 남아있어 리펙토링 이전까지 남겨둡니다.\n\nconst dayLabel = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"];\nconst monthLabel = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nexport const js_date = {\n  getYear: (date, type = \"string\") => {\n    if (type === \"number\") return date.getFullYear();\n    return date.getFullYear().toString().padStart(4, \"0\");\n  },\n  getMonth: (date, type = \"string\") => {\n    if (type === \"number\") return date.getMonth() + 1;\n    if (type === \"label\") return monthLabel[date.getMonth()];\n    const month = date.getMonth() + 1;\n    return month.toString().padStart(2, \"0\");\n  },\n  getDay: (date, type = \"string\") => {\n    if (type === \"number\") return date.getDate();\n    return date.getDate().toString().padStart(2, \"0\");\n  },\n  getLabel: (date, type = \"string\") => {\n    const idx = date.getDay();\n    if (type === \"number\") return idx;\n    return dayLabel[idx];\n  }\n}; // --------- YYYY-MM-DD 포멧에서 년/월/일을 얻는 메서드 --------- //\n\nexport const db_date = {\n  // DB 날짜의 형식을 YYYY-MM-DD로 잡았을 때 기준입니다.\n  getYear: (date, type) => {\n    if (type === \"number\") return Number(date.slice(0, 4));\n    return date.slice(0, 4);\n  },\n  getMonth: (date, type) => {\n    if (type === \"number\") return Number(date.slice(5, 7));\n    return date.slice(5, 7);\n  },\n  getDay: (date, type) => {\n    if (type === \"number\") return Number(date.slice(5, 7));\n    return date.slice(8, 10);\n  },\n  getLabel: (date, type = \"string\") => {\n    const idx = date.getDay();\n    if (type === \"number\") return idx;\n    return dayLabel[idx];\n  }\n}; // --------- 구글 위치정보 확인 서비스 --------- //\n// TODO: 사용자 위치정보를 확인하기 전 기본 배경화면으로 설정합니다.\n// TODO: 사용자가 위치정보를 허용하면, Openweather API정보로 서버의 날씨별 이미지 URL을 얻으세요.\n\nexport const geoInit = () => {\n  var startPos;\n  var geoOptions = {\n    maximumAge: 5 * 60 * 1000,\n    timeout: 10 * 1000\n  };\n\n  var geoSuccess = function (position) {\n    startPos = position; // ! 위치정보를 가져오는지 확인합니다.(임시)\n\n    const coords = {\n      latitude: startPos.coords.latitude,\n      longitude: startPos.coords.longitude\n    };\n    const code = getWeatherCode(getWeather(coords));\n  };\n\n  var geoError = function (error) {// error.code can be:\n    //   0: unknown error\n    //   1: permission denied\n    //   2: position unavailable (error response from location provider)\n    //   3: timed out\n  };\n\n  navigator.geolocation.getCurrentPosition(geoSuccess, geoError, geoOptions);\n};\nexport const getWeather = coords => {\n  const {\n    latitude,\n    longitude\n  } = coords;\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${api_key}`;\n  return axios.get(url).then(data => data.data.weather[0].id);\n};\nexport const getWeatherCode = code => {\n  code = Number(code); // * 200번대: 2(뇌우)\n\n  if (0 < code && code < 300) return 2; // * 300, 500번대: 5(비)\n  else if (code < 600) return 5; // * 800번: 8(맑음)\n    else if (code === 800) return 7; // * 600번대: 6(눈)\n      else return 8;\n}; // --------- 유효성 검사 메서드입니다 --------- //\n\nexport const isValidEamil = str => {};\nexport const isValidPassword = str => {// ! 비밀번호는 8자 이상, 20자 이하로 작성해야 합니다.\n  // ! 비밀번호는 특수문자(공백, 줄바꿈 포함)이 없어야합니다.\n  // ! 비밀번호는 영문, 숫자, 특수문자 중 2가지 이상을 혼합해야 합니다.\n};\nexport const isValidID = str => {// !아이디는 대소문자 구분없이 영문 + 숫자로 작성해야 합니다.\n  // ! 아이디는 5자 이상, 15자 이하여야 합니다.\n};","map":{"version":3,"sources":["/home/studio/Desktop/Team_Project/BuildUp-client/src/utilities/index.js"],"names":["require","config","axios","jwt","parseJSON","addMinutes","addSeconds","scheme","process","env","REACT_APP_SERVER_SCHEME","host","REACT_APP_SERVER_HOST","port","REACT_APP_SERVER_PORT","api_key","REACT_APP_SERVER_APIKEY","accessSecret","REACT_APP_SERVER_ACCESS_SECRET","URL","app","create","baseURL","withCredentials","default","fetch_custom","getUserInfo","token","result","get","headers","Authorization","crossDomain","then","data","username","email","catch","err","console","log","getTodoInfo","datas","items","days","day","map","el","i","length","date_id","date","slice","item","checked","isChecked","createTodo","post","pk","id","updateTodo","put","removeTodo","delete","getAccessToken","accessToken","jwt_isExpired","decoded","verify","dayLabel","monthLabel","js_date","getYear","type","getFullYear","toString","padStart","getMonth","month","getDay","getDate","getLabel","idx","db_date","Number","geoInit","startPos","geoOptions","maximumAge","timeout","geoSuccess","position","coords","latitude","longitude","code","getWeatherCode","getWeather","geoError","error","navigator","geolocation","getCurrentPosition","url","weather","isValidEamil","str","isValidPassword","isValidID"],"mappings":"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","sourcesContent":["require(\"dotenv\").config();\nconst axios = require(\"axios\");\nconst jwt = require(\"jsonwebtoken\");\nconst parseJSON = require(\"date-fns/parseJSON\");\nconst addMinutes = require(\"date-fns/addMinutes\");\nconst addSeconds = require(\"date-fns/addSeconds\");\nconst scheme = process.env.REACT_APP_SERVER_SCHEME;\nconst host = process.env.REACT_APP_SERVER_HOST;\nconst port = process.env.REACT_APP_SERVER_PORT;\nconst api_key = process.env.REACT_APP_SERVER_APIKEY;\nconst accessSecret = process.env.REACT_APP_SERVER_ACCESS_SECRET;\nconst URL = `${scheme}://${host}:${port}`;\n\n// --------- Fetch API --------- //\nconst app = axios.create({\n  baseURL: URL,\n  withCredentials: true,\n});\n\naxios.default.withCredentials = true;\n\nexport const fetch_custom = {\n  // ! ENDPOUNT: USER\n  getUserInfo: (token) => {\n    // * RETURN: data = {username, email}\n    const result = axios\n      .get(`${URL}/user/info`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        withCredentials: true,\n        crossDomain: true,\n      })\n      .then((data) => {\n        const { username, email } = data.data.data;\n        return { username, email };\n      })\n      .catch((err) => console.log(err));\n    return result;\n  },\n\n  // ! ENDPOUNT: TODO\n  getTodoInfo: async (token) => {\n    // * RETURN: data = [todoItems...]\n    const datas = await axios\n      .get(`${URL}/todo/info`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        withCredentials: true,\n        crossDomain: true,\n      })\n      .then((data) => {\n        const datas = data.data;\n        return datas;\n      })\n      .catch((err) => console.log(err));\n\n    const items = datas.data;\n    const days = datas.day;\n\n    const result = items.map((el) => {\n      for (let i = 0; i < days.length; i++) {\n        if (days[i][1] === el.date_id) {\n          const date = days[i][0].slice(0, 10);\n          const item = { ...el, date, checked: el.isChecked };\n          return item;\n        }\n      }\n      return el;\n    });\n\n    return result;\n  },\n\n  createTodo: (token, data) => {\n    // * DATA: {content, order, now: date}\n    // * RETURN: id(PK);\n\n    const result = axios\n      .post(\n        `${URL}/todo/create`,\n        { data: data },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n          withCredentials: true,\n          crossDomain: true,\n        },\n      )\n      .then((data) => {\n        const pk = data.data.data.id;\n        return pk;\n      })\n      .catch((err) => console.log(err));\n    return result;\n  },\n\n  updateTodo: (token, data) => {\n    // * DATA: {id, content, order, checked}\n    // * RETURN: nothing;\n\n    const result = axios\n      .put(\n        `${URL}/todo/update`,\n        { data: data },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n          withCredentials: true,\n          crossDomain: true,\n        },\n      )\n      .then((data) => {})\n      .catch((err) => console.log(err));\n    return result;\n  },\n\n  removeTodo: async (token, data) => {\n    // * DATA: {id}\n    // * RETURN: nothing;\n\n    const result = axios\n      .delete(`${URL}/todo/remove`, {\n        data: { data },\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        withCredentials: true,\n        crossDomain: true,\n      })\n      .then((data) => {})\n      .catch((err) => console.log(err));\n    return result;\n  },\n\n  getAccessToken: (token) => {\n    // * RETURN: NEW ACCESSTOKEN\n    const result = axios\n      .get(`${URL}/user/refreshtokenrequest`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        withCredentials: true,\n      })\n      .then((data) => {\n        const token = data.data.accessToken;\n        console.log(\"새로 발급된 ACCESSTOKEN은\", token);\n        return token;\n      })\n      .catch((err) => console.log(\"ACCESS TOKEN 발급에 문제가 있습니다\", err));\n\n    return result;\n  },\n};\n\n// --------- DECODE ACCESS WEB TOKEN --------- //\n\nexport const jwt_isExpired = (token) => {\n  // // ! TRUE: EXPIRED, FALSE: NOT EXPIRED\n  let result;\n  if (!token) return true;\n\n  const decoded = jwt.verify(token, accessSecret, (err, decoded) => {\n    if (err) {\n      console.log(\"ACCESS TOKEN이 만료되었습니다.\", err);\n      result = true;\n      return;\n    }\n    console.log(\"ACCESS TOKEN이 유효합니다\");\n    result = false;\n  });\n  return result;\n};\n\n// --------- 현재 시간을 기준으로 년/월/일을 얻을 수 있는 메서드 --------- //\n// ! date-fns의 format을 사용하세요\n// ! 일부 스크립트에 남아있어 리펙토링 이전까지 남겨둡니다.\n\nconst dayLabel = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"];\nconst monthLabel = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nexport const js_date = {\n  getYear: (date, type = \"string\") => {\n    if (type === \"number\") return date.getFullYear();\n    return date.getFullYear().toString().padStart(4, \"0\");\n  },\n\n  getMonth: (date, type = \"string\") => {\n    if (type === \"number\") return date.getMonth() + 1;\n    if (type === \"label\") return monthLabel[date.getMonth()];\n    const month = date.getMonth() + 1;\n    return month.toString().padStart(2, \"0\");\n  },\n\n  getDay: (date, type = \"string\") => {\n    if (type === \"number\") return date.getDate();\n    return date.getDate().toString().padStart(2, \"0\");\n  },\n\n  getLabel: (date, type = \"string\") => {\n    const idx = date.getDay();\n    if (type === \"number\") return idx;\n    return dayLabel[idx];\n  },\n};\n\n// --------- YYYY-MM-DD 포멧에서 년/월/일을 얻는 메서드 --------- //\n\nexport const db_date = {\n  // DB 날짜의 형식을 YYYY-MM-DD로 잡았을 때 기준입니다.\n  getYear: (date, type) => {\n    if (type === \"number\") return Number(date.slice(0, 4));\n    return date.slice(0, 4);\n  },\n\n  getMonth: (date, type) => {\n    if (type === \"number\") return Number(date.slice(5, 7));\n    return date.slice(5, 7);\n  },\n\n  getDay: (date, type) => {\n    if (type === \"number\") return Number(date.slice(5, 7));\n    return date.slice(8, 10);\n  },\n\n  getLabel: (date, type = \"string\") => {\n    const idx = date.getDay();\n    if (type === \"number\") return idx;\n    return dayLabel[idx];\n  },\n};\n\n// --------- 구글 위치정보 확인 서비스 --------- //\n// TODO: 사용자 위치정보를 확인하기 전 기본 배경화면으로 설정합니다.\n// TODO: 사용자가 위치정보를 허용하면, Openweather API정보로 서버의 날씨별 이미지 URL을 얻으세요.\n\nexport const geoInit = () => {\n  var startPos;\n  var geoOptions = {\n    maximumAge: 5 * 60 * 1000,\n    timeout: 10 * 1000,\n  };\n\n  var geoSuccess = function (position) {\n    startPos = position;\n\n    // ! 위치정보를 가져오는지 확인합니다.(임시)\n    const coords = {\n      latitude: startPos.coords.latitude,\n      longitude: startPos.coords.longitude,\n    };\n    const code = getWeatherCode(getWeather(coords));\n  };\n  var geoError = function (error) {\n    // error.code can be:\n    //   0: unknown error\n    //   1: permission denied\n    //   2: position unavailable (error response from location provider)\n    //   3: timed out\n  };\n\n  navigator.geolocation.getCurrentPosition(geoSuccess, geoError, geoOptions);\n};\n\nexport const getWeather = (coords) => {\n  const { latitude, longitude } = coords;\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${api_key}`;\n\n  return axios.get(url).then((data) => data.data.weather[0].id);\n};\n\nexport const getWeatherCode = (code) => {\n  code = Number(code);\n  // * 200번대: 2(뇌우)\n  if (0 < code && code < 300) return 2;\n  // * 300, 500번대: 5(비)\n  else if (code < 600) return 5;\n  // * 800번: 8(맑음)\n  else if (code === 800) return 7;\n  // * 600번대: 6(눈)\n  else return 8;\n};\n\n// --------- 유효성 검사 메서드입니다 --------- //\n\nexport const isValidEamil = (str) => {};\n\nexport const isValidPassword = (str) => {\n  // ! 비밀번호는 8자 이상, 20자 이하로 작성해야 합니다.\n  // ! 비밀번호는 특수문자(공백, 줄바꿈 포함)이 없어야합니다.\n  // ! 비밀번호는 영문, 숫자, 특수문자 중 2가지 이상을 혼합해야 합니다.\n};\n\nexport const isValidID = (str) => {\n  // !아이디는 대소문자 구분없이 영문 + 숫자로 작성해야 합니다.\n  // ! 아이디는 5자 이상, 15자 이하여야 합니다.\n};\n"]},"metadata":{},"sourceType":"module"}